Q-1)Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n.

#!/bin/bash -x

read -p "Enter a number: " num
for (( counter=1; counter<=num; counter++ ))
do
        echo $((2**$counter))
done

Output:$ ./powerOf2.sh
+ read -p 'Enter a number: ' num
Enter a number: 4
+ (( counter=1 ))
+ (( counter<=num ))
+ echo 2
2
+ (( counter++  ))
+ (( counter<=num ))
+ echo 4
4
+ (( counter++  ))
+ (( counter<=num ))
+ echo 8
8
+ (( counter++  ))
+ (( counter<=num ))
+ echo 16
16
+ (( counter++  ))
+ (( counter<=num ))

Q-)Write a program that takes a command-line argument n and prints the nth harmonic number.

#!/bin/bash -x

read -p "Enter a number: " num

for (( counter=1; counter<=$num; counter++))
do
        if [ $counter -eq $num ]
        then
                result='1/'$counter
                harmonic+=$result
        else
                result='1/'$counter'+'
                harmonic+=$result
        fi
done
echo $harmonic

Output:$ ./harmonic.sh
+ read -p 'Enter a number: ' num
Enter a number: 4
+ (( counter=1 ))
+ (( counter<=4 ))
+ '[' 1 -eq 4 ']'
+ result=1/1+
+ harmonic+=1/1+
+ (( counter++ ))
+ (( counter<=4 ))
+ '[' 2 -eq 4 ']'
+ result=1/2+
+ harmonic+=1/2+
+ (( counter++ ))
+ (( counter<=4 ))
+ '[' 3 -eq 4 ']'
+ result=1/3+
+ harmonic+=1/3+
+ (( counter++ ))
+ (( counter<=4 ))
+ '[' 4 -eq 4 ']'
+ result=1/4
+ harmonic+=1/4
+ (( counter++ ))
+ (( counter<=4 ))
+ echo 1/1+1/2+1/3+1/4
1/1+1/2+1/3+1/4

Q-3)Write a program that takes a input and determines if the number is a prime.

#!/bin/bash -x

read -p "Enter a number:" n
for(( i=2; i<=$n/2; i++ ))
do
        if [ $((n%i)) == 0 ]
        then
                echo "$n is not a prime number"
        exit
        fi
done
echo "$n is a prime number"

Output: $ ./prime.sh
+ read -p 'Enter a number:' n
Enter a number:7
+ (( i=2 ))
+ (( i<=7/2 ))
+ '[' 1 == 0 ']'
+ (( i++  ))
+ (( i<=7/2 ))
+ '[' 1 == 0 ']'
+ (( i++  ))
+ (( i<=7/2 ))
+ echo '7 is a prime number'
7 is a prime number

gyans@DESKTOP-Q8861V1 MINGW64 ~/terminal-commands/linux-content/temp (master)
$ ./prime.sh
+ read -p 'Enter a number:' n
Enter a number:8
+ (( i=2 ))
+ (( i<=8/2 ))
+ '[' 0 == 0 ']'
+ echo '8 is not a prime number'
8 is not a prime number
+ exit

Q-4)Extend the program to take a range of number as input and output the Prime Numbers in that range.

#!/bin/bash

x=1
read -p "Enter the starting number: " start
read -p "Enter the ending number: " end
for (( index=start; index<=end; index++ ))
do
        for(( counter=2; counter<=index/2; counter++ ))
        do
                if [ $(( $index % $counter )) == 0 ]
                then
                        x=0
                        break
                else
                        x=1
                fi
                done

if [ $(($x)) == 1 ]
then
        echo $index
fi
done

Output:$ ./extendingPrime.sh
Enter the starting number: 10
Enter the ending number: 20
11
13
17
19

Q-5)Write a program that computes a factorial of a number taken as input.
5 Factorial – 5! = 1 * 2 * 3 * 4 * 5

#!/bin/bash -x

read -p " Enter a number: " num
factorial=1;
for (( counter=2; counter<=num; counter++ ))
do
        factorial=$(( $factorial * $counter ))
done
echo "The factorial of $num is: $factorial"

Output:$ ./factorial.sh
+ read -p ' Enter a number: ' num
 Enter a number: 5
+ factorial=1
+ (( counter=2 ))
+ (( counter<=num ))
+ factorial=2
+ (( counter++  ))
+ (( counter<=num ))
+ factorial=6
+ (( counter++  ))
+ (( counter<=num ))
+ factorial=24
+ (( counter++  ))
+ (( counter<=num ))
+ factorial=120
+ (( counter++  ))
+ (( counter<=num ))
+ echo 'The factorial of 5 is: 120'
The factorial of 5 is: 120

Repitition practice problems with while loop

Q-1)Write a program that takes a command-line argument n and prints a table of the powers of 2 that are less than or equal to 2^n till 256 is reached.

#!/bin/bash -x

read -p "Enter a number:" num
counter=1;
while [ $counter -le $num ]
do
        if [ $counter -eq 9 ]
        then
                break
        else
                power=$(( 2**$counter ))
                echo $power
                ((counter++))
        fi
done

Output:$ ./powerOf2While.sh
+ read -p 'Enter a number:' num
Enter a number:12
+ counter=1
+ '[' 1 -le 12 ']'
+ '[' 1 -eq 9 ']'
+ power=2
+ echo 2
2
+ (( counter++ ))
+ '[' 2 -le 12 ']'
+ '[' 2 -eq 9 ']'
+ power=4
+ echo 4
4
+ (( counter++ ))
+ '[' 3 -le 12 ']'
+ '[' 3 -eq 9 ']'
+ power=8
+ echo 8
8
+ (( counter++ ))
+ '[' 4 -le 12 ']'
+ '[' 4 -eq 9 ']'
+ power=16
+ echo 16
16
+ (( counter++ ))
+ '[' 5 -le 12 ']'
+ '[' 5 -eq 9 ']'
+ power=32
+ echo 32
32
+ (( counter++ ))
+ '[' 6 -le 12 ']'
+ '[' 6 -eq 9 ']'
+ power=64
+ echo 64
64
+ (( counter++ ))
+ '[' 7 -le 12 ']'
+ '[' 7 -eq 9 ']'
+ power=128
+ echo 128
128
+ (( counter++ ))
+ '[' 8 -le 12 ']'
+ '[' 8 -eq 9 ']'
+ power=256
+ echo 256
256
+ (( counter++ ))
+ '[' 9 -le 12 ']'
+ '[' 9 -eq 9 ']'
+ break

Q-2)Find the Magic Number
a. Ask the user to think of a number n between 1 to 100
b. Then check with the user if the number is less then n/2 or greater
C. Repeat till the Magic Number is reached..

#!/bin/bash -x

read -p "Enter a number between 1 to 100 :" number
begin=1
end=100
middle=$(( (begin+end)/2 ))
while [ $begin -lt $end ]
do
        if [[ $number -eq $middle ]]
        then
                echo $middle
                break
        elif [ $number -lt $middle ]
        then
                end=$middle
                middle=$((($begin+$end)/2))
        else
                begin=$middle
                middle=$((($begin+$end)/2))
        fi
done

Output: $ ./magicNumber.sh
+ read -p 'Enter a number between 1 to 100 :' number
Enter a number between 1 to 100 :96
+ begin=1
+ end=100
+ middle=50
+ '[' 1 -lt 100 ']'
+ [[ 96 -eq 50 ]]
+ '[' 96 -lt 50 ']'
+ begin=50
+ middle=75
+ '[' 50 -lt 100 ']'
+ [[ 96 -eq 75 ]]
+ '[' 96 -lt 75 ']'
+ begin=75
+ middle=87
+ '[' 75 -lt 100 ']'
+ [[ 96 -eq 87 ]]
+ '[' 96 -lt 87 ']'
+ begin=87
+ middle=93
+ '[' 87 -lt 100 ']'
+ [[ 96 -eq 93 ]]
+ '[' 96 -lt 93 ']'
+ begin=93
+ middle=96
+ '[' 93 -lt 100 ']'
+ [[ 96 -eq 96 ]]
+ echo 96
96
+ break

Q-3)Extend the Flip Coin problem till either Heads or Tails wins 11 times.

#!/bin/bash -x
hCounter=0;
tCounter=0;
while [[ $hCounter -le 10 && $tCounter -le 10 ]]
do
        if [ $((RANDOM%2)) -eq 0 ]
        then
                hCounter=$(( $hCounter+1 ))
        else
                tCounter=$(( $tCounter+1 ))
        fi
done
echo "Head" = $hCounter
echo "Tail" = $tCounter
if [ $hCounter -gt $tCounter ]
then
        echo "Head wins"
else
        echo "Tail wins"
fi

Output:$ ./headTail.sh
+ hCounter=0
+ tCounter=0
+ [[ 0 -le 10 ]]
+ [[ 0 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=1
+ [[ 1 -le 10 ]]
+ [[ 0 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=1
+ [[ 1 -le 10 ]]
+ [[ 1 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=2
+ [[ 2 -le 10 ]]
+ [[ 1 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=3
+ [[ 3 -le 10 ]]
+ [[ 1 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=2
+ [[ 3 -le 10 ]]
+ [[ 2 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=3
+ [[ 3 -le 10 ]]
+ [[ 3 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=4
+ [[ 4 -le 10 ]]
+ [[ 3 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=5
+ [[ 5 -le 10 ]]
+ [[ 3 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=4
+ [[ 5 -le 10 ]]
+ [[ 4 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=5
+ [[ 5 -le 10 ]]
+ [[ 5 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=6
+ [[ 6 -le 10 ]]
+ [[ 5 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=7
+ [[ 7 -le 10 ]]
+ [[ 5 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=6
+ [[ 7 -le 10 ]]
+ [[ 6 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=8
+ [[ 8 -le 10 ]]
+ [[ 6 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=7
+ [[ 8 -le 10 ]]
+ [[ 7 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=9
+ [[ 9 -le 10 ]]
+ [[ 7 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=8
+ [[ 9 -le 10 ]]
+ [[ 8 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=10
+ [[ 10 -le 10 ]]
+ [[ 8 -le 10 ]]
+ '[' 1 -eq 0 ']'
+ tCounter=9
+ [[ 10 -le 10 ]]
+ [[ 9 -le 10 ]]
+ '[' 0 -eq 0 ']'
+ hCounter=11
+ [[ 11 -le 10 ]]
+ echo Head = 11
Head = 11
+ echo Tail = 9
Tail = 9
+ '[' 11 -gt 9 ']'
+ echo 'Head wins'
Head wins

Third page

Q-1)Help user find degF or degC based on their Conversion Selection. Use
Case Statement and ensure that the inputs are within the Freezing Point (
0 °C / 32 °F ) and the Boiling Point of Water ( 100 °C / 212 °F )
a. degF = (degC * 9/5) + 32
b. degC = (degF – 32) * 5/9

#!/bin/bash -x

function farToCel(){
                read -p "Enter the temp in farenheit: " tempInFar
                if [[ $tempInFar -ge 32 && $tempInFar -le 212 ]]
                then
                        tempInCel=$((($tempInFar - 32) * 5/9 ))
                        echo "$tempInFar Farenheight = $tempInCel Celcius"
                else
                        echo "Temprature out of limit"
                fi
}
function celToFar(){
                read -p "Enter the temp in celcius: " tempInCel
                if [[ $tempInCel -ge 0 && $tempInCel -le 100 ]]
                then
                        tempInFar=$((($tempInCel * 9/5) + 32 ))
                        echo "$tempInCel Celcius = $tempInFar Farenheit"
                else
                        echo "Temprature is out of limit"
                fi

}
echo "1 for Farenheit To Celcius"
echo "2 for Celcius To Farenheit"
read -p "Enter your choice:" c
case $c in
                1)
                        farToCel ;;
                2)
                        celToFar ;;
                *)
                        echo "U enterd wrong..enter below 3" ;;
esac

Output:$ ./degFunction.sh
+ echo '1 for Farenheit To Celcius'
1 for Farenheit To Celcius
+ echo '2 for Celcius To Farenheit'
2 for Celcius To Farenheit
+ read -p 'Enter your choice:' c
Enter your choice:1
+ case $c in
+ farToCel
+ read -p 'Enter the temp in farenheit: ' tempInFar
Enter the temp in farenheit: 208
+ [[ 208 -ge 32 ]]
+ [[ 208 -le 212 ]]
+ tempInCel=97
+ echo '208 Farenheight = 97 Celcius'
208 Farenheight = 97 Celcius

Q-2)Write a function to check if the two numbers are Palindromes.

#!/bin/bash
function checkPalindrome(){
        read -p "Enter a number : " number1
        read -p "Enter a number : " number2
        reverse=0
        while [[ $number1 -ne 0 ]]
        do
                reminder=$(($number1%10))
                reverse=$(($reverse*10))
                reverse=$(($reminder +$reverse))
                number1=$(($number1/10))
        done

        if [[ $number2 -eq $reverse ]]
        then
                echo "Numbers are palindrome"
        else
                echo "Numbers are Not Palindrome"
        fi
}
checkPalindrome

Output:$ ./palindrome.sh
Enter the number to check: 232
Enter the number to check: 232
Numbers are palindrome

gyans@DESKTOP-Q8861V1 MINGW64 ~/terminal-commands/linux-content/temp/Day-6 Assignments (master)
$ ./palindrome.sh
Enter the number to check: 233
Enter the number to check: 242
Numbers are Not Palindrome

Q-3)Take a number from user and check if the number is a Prime then show

that its palindrome is also prime
a. Write function check if number is Prime
b. Write function to get the Palindrome.
c. Check if the Palindrome number is also prime

#!/bin/bash

reverse=0
read -p "Enter the number: " num
function checkPrime(){
        checkNumber=$1
        for(( i=2; i<=$checkNumber/2; i++ ))
        do
                if [[ $checkNumber%i == 0 ]]
                then
                        echo "$checkNumber is not a prime number"
                exit
                fi
        done
        echo "$checkNumber is a prime number"
}

function checkPalindrome(){
        num=$1
        while [[ $num -ne 0 ]]
        do
                reminder=$(($num%10))
                reverse=$(($reverse*10))
                reverse=$(($reminder+$reverse))
                num=$(($num/10))
        done

        if [[ $1 -eq $reverse ]]
        then
                echo "$1 and $reverse are palindrome"
        else
                echo "Numbers are Not Palindrome"
        fi
}
checkPrime $num
checkPalindrome $num
checkPrime $reverse

Output:$ ./primePalindrome.sh
Enter the number: 20
20 is not a prime number
Numbers are Not Palindrome
2 is not a prime number

$ ./primePalindrome.sh
Enter the number: 121
121 is a prime number
121 and 121 are palindrome
121 is a prime number


